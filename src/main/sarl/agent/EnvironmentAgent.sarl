package ^agent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.lang.core.Address
import io.sarl.util.Scopes
import java.util.List
import java.util.UUID
import tx52.environment.EnvironmentChangeQuery
import tx52.environment.EnvironmentListener
import tx52.util.ConstantContainer

/**
 * @author Olivier
 * 
 */

agent EnvironmentAgent { 
	
	uses DefaultContextInteractions, Lifecycle
	uses MapManager, TimeManager
	
	var listeners = <EnvironmentListener>newArrayList
	val actions = <EnvironmentChangeQuery>newLinkedList
	var adr : Address
	var spaceID : UUID  
	var countInit = 0
	val agentNumber = ConstantContainer.NB_AGENTS

	on Initialize{
		
		setSkill(typeof(TimeManager),new DefaultTimeManager)
		
		spaceID = defaultSpace.getID.getID
		adr=defaultSpace.getAddress(this.ID)
		
		//we create the environment *in the skill*
		setSkill(typeof(MapManager), new DefaultMapManagerSkill(ConstantContainer.MAP_WIDTH,ConstantContainer.MAP_HEIGHT))
		createMapSurroundings 
		//we create the objects -> need to link the agents
		for (var i=0;i<agentNumber;i++) {
			var body = createUnit(ConstantContainer.BASIC_PERCEPTION_DISTANCE, 1)
			var agentParameters : List<Object> = newArrayList(spaceID,this.getID/*BehaviorType */)
			var agentType = AgentTest//AgentBody.AgentType //semantique de l'agent
			
			spawnInContextWithID(
				agentType,
				body.getId,
				defaultContext,
				agentParameters.toArray)
		}
		
		updateWindow //mis a jour de la vue utilisateur
		//fireEnvironmentChange //utile ?
		
	}
	/**
	 * make a copy of the environment and send it to the GUI + wake up all listeners
	 */
	def fireEnvironmentChange {
		/*var objects = new TreeMap<Point,EnvironmentObject>
		for (obj : getEnvironmentObjects) {
				objects.put(obj.position,obj)
		}
		var ^event = new EnvironmentEvent (ID, this.time, mapWidth, mapHeight, Collections::unmodifiableMap(objects))
		for (listener : this.listeners) {
			listener.EnvironmentChanged(^event)
		}*/
	}
	
	on agentReady {
		synchronized(this) {
			countInit++
			if(countInit==agentNumber){
				emit(new RunBeginingOfStep,Scopes::addresses(adr))
			}
			
		}
	}
	
	on Influence [occurrence.time >= time] {  
		
		synchronized(this) {
			
			if(occurrence instanceof MotionInfluence){
				this.actions += new EnvironmentChangeQuery(occurrence.source.getUUID,occurrence.vector,ConstantContainer.MOTION_TYPE)
			}else if (occurrence instanceof ShootInfluence){
				this.actions += new EnvironmentChangeQuery(occurrence.source.getUUID,occurrence.target,occurrence.attackSpeed,ConstantContainer.SHOOT_TYPE)
			}
			
			if (this.actions.size >= bodyCount) {
				emit(new RunEndOfStep,Scopes::addresses(adr))
			}
		}
	}

	/** 
	* initialize the turn (update world state, give perceptions to AI, fire all the agents, *increase time) *or in endOfStep 
	*/
	on RunBeginingOfStep {
		
		

		synchronized(this){

				this.actions.clear()
				
				startTimeCount()
				
				sendPerceptions(getTime) // Perception computation
				
				//execution de tous les agents
				//récupération des influences -> processus parallele
			
		}
	}
	
	/**
	 * 
	 * update world state, update the position of all objects, move to next step
	*/	
	on RunEndOfStep {
		
		synchronized(this) {
		
			while(SpawnButtonRequestA){
					var body = createUnit(ConstantContainer.BASIC_PERCEPTION_DISTANCE,1)
					var agentParameters : List<Object> = newArrayList(spaceID,this.getID/*BehaviorType */)
					var agentType = AgentTest//AgentBody.AgentType //semantique de l'agent
					spawnInContextWithID(
					agentType,
					body.getId,
					defaultContext,
					agentParameters.toArray)
			}
			while(SpawnButtonRequestB){
					var body = createUnit(ConstantContainer.BASIC_PERCEPTION_DISTANCE,2)
					var agentParameters : List<Object> = newArrayList(spaceID,this.getID/*BehaviorType */)
					var agentType = AgentTest//AgentBody.AgentType //semantique de l'agent
					spawnInContextWithID(
					agentType,
					body.getId,
					defaultContext,
					agentParameters.toArray)
			}
//			vr t1 = System.nanoTime()
			resolveInfluences(actions)
//			var t2 = System.nanoTime()
//			var result = t2-t1;
//			System.out.println("Time to resolve influences : " + result)
			
			updateTree
			updateWindow 
			//printTree //debug
			TimeStep
			WaitUntilEndOfStep
			emit(new RunBeginingOfStep,Scopes::addresses(adr))
			//var t2 = System.nanoTime()
		}
	}
	
		
	def fireGameOver {
		for (listener : this.listeners) {
			listener.gameOver()
		}
	}
}