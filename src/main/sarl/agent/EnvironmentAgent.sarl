package ^agent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import tx52.environment.EnvironmentListener

/**
 * @author Olivier
 * 
 */
agent EnvironmentAgent { 
	
	uses DefaultContextInteractions, Lifecycle
	uses MapManager, EndOfTurn, Logging
	
	var listeners = <EnvironmentListener>newArrayList
	var time = 0.0f
//	val actions = <environmentChangeQuery>newLinkedList
	
	on Initialize{
		
		//we create the environment *in the skill*
		setSkill(typeof(MapManager), new DefaultMapManagerSkill(200,200))

		//we create the objects
		for (var i=0;i<60;i++) {
			var u = createUnit(10)
		}
		/*we create the agent and they will create their body ?
		* I'm not sure about this because an agent cannot access the world. In this case they should ask for the creation of they body
		* maybe it's easier to create the body and the agent separately and then, link them.
		*/
		
		fireEnvironmentChange
		
		
		emit(new RunBeginingOfStep)
	}
	/**
	 * make a copy of the environment and send it to the GUI + wake up all listeners
	 */
	def fireEnvironmentChange {
		/*var objects = new TreeMap<Point,EnvironmentObject>
		for (obj : getEnvironmentObjects) {
				objects.put(obj.position,obj)
		}
		var ^event = new EnvironmentEvent (ID, this.time, mapWidth, mapHeight, Collections::unmodifiableMap(objects))
		for (listener : this.listeners) {
			listener.EnvironmentChanged(^event)
		}*/
	}
	
/* 
	on Influence [occurrence.time >= time] {
		synchronized(this) {
			this.actions += new EnvironmentChangeQuery(occurrence.source.getUUID,occurrence.vector)
			
			if (this.actions.size >= bodyCount - 1) {
				emit(new RunEndOfStep, Scopes.addresses(defaultAddress))
			}
		}
	}
*/
	/** 
	* initialize the turn (update world state, give perceptions to AI, fire all the agents, *increase time) *or in endOfStep 
	*/
	on RunBeginingOfStep {
		
		//TODO write RunBeginingOfStep

		synchronized(this){
				RunJbox //1 step of simulation
				updateWindow
				printTree
				sendPerceptions(this.time)
				

		}
	}
	
	/**
	 * 
	 * update world state, update the position of all objects, move to next step
	*/	
	on RunEndOfStep {
		
		synchronized(this) {
			
		}
	}
	
	
	def fireGameOver {
		for (listener : this.listeners) {
			listener.gameOver()
		}
	}
}