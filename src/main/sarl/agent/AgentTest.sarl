/**
 * 
 */
package ^agent

import Behaviour.KinematicWanderBehaviour
import Behaviour.SeekBehaviour
import Behaviour.WanderBehaviour
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.UUID

/**
 * @author Dudul
 *
 */
agent AgentTest extends AbstractAnimat {

	uses  Lifecycle, DefaultContextInteractions
	
	var seekBehaviour : SeekBehaviour
	var wanderBehaviour : WanderBehaviour  
	  
	on Initialize{
		super._handle_Initialize_0(occurrence) 
		//print("Agent Spawn\n")
		emit(new agentReady)
	}
	
	on Perception{
		var body = occurrence.body
		var targetID : UUID = null
		if(occurrence.objects.size()>0){
			for (object : occurrence.objects){
				if (object.getTeam() != body.getTeam() && object.getTeam() != 0){
					targetID = object.getBodyId()
				}
			}
			if(targetID!=null){
				influenceAttack(occurrence.time,targetID)
			}else{
				this.wanderBehaviour = new KinematicWanderBehaviour
				//position : Point2f, orientation : Vector2f, linearSpeed : float, maxLinear : float, angularSpeed : float, maxAngular : float
				var o = this.wanderBehaviour.runWander(
				body.position,
				body.currentLinearMotion,
				body.currentLinearMotion.length,
				body.maxLinearSpeed,
				body.currentAngularSpeed,
				body.maxAngularSpeed
				)
				o.emitInfluence(occurrence.time)
			}
		}else{
			this.wanderBehaviour = new KinematicWanderBehaviour
			//position : Point2f, orientation : Vector2f, linearSpeed : float, maxLinear : float, angularSpeed : float, maxAngular : float
			var o = this.wanderBehaviour.runWander(
			body.position,
			body.currentLinearMotion,
			body.currentLinearMotion.length,
			body.maxLinearSpeed,
			body.currentAngularSpeed,
			body.maxAngularSpeed
			)
			o.emitInfluence(occurrence.time)
		}
		
		
	}
}