package ^agent

import java.util.List
import java.util.Map
import java.util.UUID
import org.arakhne.afc.math.continous.object2d.Point2f
import tx52.environment.AgentBody
import tx52.environment.EnvMap
import tx52.environment.EnvironmentObject
import tx52.environment.RTree
import tx52.environment.Environment
import tx52.gui.Window
import tx52.environment.Perceivable
import java.util.ArrayList
import io.sarl.core.DefaultContextInteractions
import tx52.environment.EnvironmentChangeQuery
import java.util.TreeMap

/**
 * @author Olivier
 *
 */
 
 /** Capacity to manage the map */
capacity MapManager {
	/** Replies the number of bodies in the map */
	def getBodyCount : int
	
	/** execute the list of influences 
	 * 	@return true if game is over? *TBD* */
	def resolveInfluences (actions : List<EnvironmentChangeQuery>) : boolean
	
	/** replies the perceptions */
	def sendPerceptions (time : float)
	
	/** replies the width of the map. */
	def getMapWidth : float
	
	/** replies the height of the map. */
	def getMapHeight : float
	
	/** replies all the objects */
	def getAllObjects : RTree
	
	/** Replies a specific body */
	def getAgentBody(id : UUID) : AgentBody
	
	/** Create basic Unit */
	def createUnit(perceptionDistance : float) : AgentBody
	
	def RunJbox
	
	def updateWindow
	
	def printTree

	
}


capacity EndOfTurn {
	def sendPerception(time : float, bodyID : UUID, objects : ArrayList<Perceivable>,position : Point2f)
	
}


skill DefaultMapManagerSkill implements MapManager {
	
	uses DefaultContextInteractions
	
	val width : float
	val height : float
	
	var environment : Environment
	var GUI : Window
	//var agentList : Map<UUID,agent>
	
	new (width : float, height : float) {
			this.width = width
			this.height = height
	}
	
	override install {
		/**where is the constructor of the map according to its size? */
		this.environment = new Environment(this.width,this.height)
		GUI = new Window(this.environment)
	}
	
	override getBodyCount : int {
		/** create a method to get size of the objectlist */
		/** this.map.getObjectList().size()*/
		0
	}
	
	override resolveInfluences(actions : List<EnvironmentChangeQuery>) : boolean {
		
		RunJbox // 1 step of simulation	
		
		false
	}

	/**
	 * calcul de toutes les perceptions -> utile seulement pour le général
	 */
 	override sendPerceptions(time : float) {
		
		for (body : this.environment.world.agentBodies) {
			
			
			var percevaibles = newArrayList
			percevaibles = body.computePerception
			var pos = body.position
			
			var perceptionEvent = new Perception(time,body.getAgentId,percevaibles,pos,body)
			System.out.printf("\nPerception de l'UUID : "+body.getAgentId()+"\ntime: "+time+" position: " +pos);
			System.out.printf("\nPercevaibles :\n");
			for(per : percevaibles){
				System.out.printf("object : "+per+"\n")
			}
			
			//emit(perceptionEvent/* ,agentList.get  body.getAgentId*/)

		}
		
	}
	
	override getMapWidth : float {
		this.width
	}
	
	override getMapHeight : float {
		this.height
	}
	
	override getAllObjects : RTree {
		this.environment.world.getObjectList()
		
	}
	
	override getAgentBody(id : UUID) : AgentBody {
		// TODO Auto-generated action.
		this.environment.world.getAgentBody(id)
	}
	
	override createUnit(perceptionDistance : float) : AgentBody {
		// TODO Auto-generated action.
		this.environment.world.createBody(typeof(AgentBody),null,this.environment.getjBoxWorld(),perceptionDistance)
	
	}
	
	override RunJbox {
		// TODO Auto-generated action.
		this.environment.runJBox()
	}
	
	override updateWindow {
		// TODO Auto-generated action.
		this.GUI.updateWindow()
	}
	
	override printTree {
		this.environment.printMap()
	}
	
}

/** Skill for being the front-end of a maze.
 * 
 */

/*skill DefaultEndOfTurnSkill implements EndOfTurn{
	
	uses DefaultContextInteractions
	
	
	override sendPerception(time : float, bodyID : UUID, objects : ArrayList<Perceivable>, position : Point2f) {
		var p = new Perception(time, bodyID, objects, position)
		
	}
	
}*/