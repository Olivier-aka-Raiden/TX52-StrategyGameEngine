package ^agent

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.lang.core.Address
import io.sarl.util.OpenEventSpace
import io.sarl.util.Scopes
import java.util.List
import java.util.UUID
import org.arakhne.afc.math.continous.object2d.Vector2f
import org.jbox2d.common.Vec2
import tx52.environment.AgentBody
import tx52.environment.Environment
import tx52.environment.EnvironmentChangeQuery
import tx52.environment.EnvironmentObject
import tx52.environment.RTree
import tx52.environment.StaticObject
import tx52.gui.Window
import tx52.util.AddressUUIDScope

skill StandardPhysicEnvironment implements PhysicEnvironment { 

	uses DefaultContextInteractions, Behaviors

	val spaceID : UUID
	val environmentID : UUID
	var physicSpace : OpenEventSpace
	var myAdr : Address

	new (spaceID : UUID, environmentID : UUID) {
		this.environmentID = environmentID
		this.spaceID = spaceID
	}

	override install { 
		do {
			this.physicSpace = defaultContext.getSpace(this.spaceID) 
			Thread::yield
		} while (this.physicSpace == null)
		this.physicSpace.register(asEventListener)
		this.myAdr = this.physicSpace.getAddress(owner.ID)  
	}
	
/*	override uninstall() {  
		var ^event = new InfluenceEvent(new KillInfluence)
		^event.source = this.myAdr
		this.physicSpace.emit(^event, new AddressUUIDScope(this.environmentID))
		this.physicSpace = null
	}*/
	
	override influenceKinematic(linearInfluence : Vector2f = null, angularInfluence : float = 0f) {
		
		var ^event = new Influence(angularInfluence,linearInfluence)
		^event.source = this.myAdr
		this.physicSpace.emit(^event, new AddressUUIDScope(this.environmentID))
	}
	
}

skill DefaultMapManagerSkill implements MapManager {
	
	uses DefaultContextInteractions
	
	val width : float
	val height : float
	
	var environment : Environment
	var GUI : Window
	
	new (width : float, height : float) {
			this.width = width
			this.height = height
	}
	
	override install {
		/**where is the constructor of the map according to its size? */
		this.environment = new Environment(this.width,this.height)
		GUI = new Window(this.environment)
	}
	
	override getBodyCount : int {
		/** create a method to get size of the objectlist */
		 return this.environment.world.getBodyCount()
	}
	
	override resolveInfluences(actions : List<EnvironmentChangeQuery>) : boolean {
		
		for( change : actions){
			var body = getAgentBody(change.getEmitter).getBody()
			var velocity = change.getVelocity
			var force = new Vec2(velocity.getX(),velocity.getY())
			body.setLinearVelocity(force)
			//print("test")
		}
		
		RunJbox // 1 step of simulation	
		
		false
	}

	/**
	 * calcul de toutes les perceptions -> utile seulement pour le général
	 */
 	override sendPerceptions(time : float) {
		
		for (body : this.environment.world.agentBodies) {
			
			
			var percevaibles = newArrayList
			percevaibles = body.computePerception
			var pos = body.position
			
			var perceptionEvent = new Perception(time,body.getId,percevaibles,pos,body)
//			System.out.printf("\nPerception de l'UUID : "+body.getAgentId()+"\ntime: "+time+" position: " +pos);
//			System.out.printf("\nPercevaibles :\n");
//			for(per : percevaibles){
//				System.out.printf("object : "+per+"\n")
//			}
			var adr=defaultSpace.getAddress(body.getId)
			emit(perceptionEvent ,Scopes::addresses(adr))

		}
		
	}
	
	override getMapWidth : float {
		this.width
	}
	
	override getMapHeight : float {
		this.height
	}
	
	override getAllObjects : RTree {
		this.environment.world.getObjectList()
		
	}
	
	override getAgentBody(id : UUID) : AgentBody {
		// TODO Auto-generated action.
		this.environment.world.getAgentBody(id)
	}
	
	override createUnit(perceptionDistance : float) : AgentBody {
		// TODO Auto-generated action.
		this.environment.world.createBody(typeof(AgentBody),null,this.environment.getjBoxWorld(),perceptionDistance)
	
	}
	
	override createMapSurroundings {
		var id : UUID
		id = UUID.randomUUID()
		var objects = <EnvironmentObject>newArrayList(new StaticObject(10,100,20,200,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(100,5,200,10,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(190,100,40,200,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(100,180,200,40,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(20,86,40,20,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(80,10,10,30,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(170,90,50,10,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(95,170,10,60,id,environment.getjBoxWorld,environment.getWorld()))
		id = UUID.randomUUID()
		objects.add(new StaticObject(93,73,6,6,id,environment.getjBoxWorld,environment.getWorld()))
		this.environment.addObjectToWorld(objects)
	}
	
	override RunJbox {
		
		this.environment.runJBox()
	}
	
	override updateWindow {
		
		this.GUI.updateWindow()
	}
	
	override printTree {
		this.environment.printMap()
	}
	 
	override updateTree {
		this.environment.updateTree()
	}
	
	override SpawnButtonRequest : boolean {
			if (!this.environment.getEventFire().isEmpty()){
				this.environment.getEventFire().poll()
				return true;
			}
			return false;	
	}
	
}